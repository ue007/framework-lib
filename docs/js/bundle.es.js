class e{type;source;constructor(e,s){this.type=e,this.source=s}}class s extends e{property;oldValue;newValue;constructor(e,s,t,c){super("change",e),this.property=s,this.oldValue=t,this.newValue=c}}class t{listenerMap=new Map;source;on(e,s,t){const c=this.listenerMap.get(e),l={callback:s,scope:t};if(c){c.some((e=>e.callback===s&&e.scope===t))||c.push(l)}else this.listenerMap.set(e,[l])}off(e,s){const t=this.listenerMap.get(e);if(t){const e=t.findIndex((e=>e.callback===s));e>=0&&t.splice(e,1)}}fire(e){const s=this.listenerMap.get(e.type);s&&s.length&&s.forEach((s=>{s.callback.call(s.scope,e)}))}firePropertyChanged(e,t,c){this.fire(new s(this.source,e,t,c))}}export{s as ChangeEvent,t as Trigger,e as TriggerEvent};
//# sourceMappingURL=bundle.es.js.map
